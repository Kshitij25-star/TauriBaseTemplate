// -------------------------------------------------------
// Instances (TENANT EQUIVALENT)
// -------------------------------------------------------
Table instances as I {
// Each "instance" is effectively a tenant.
// One instance can have multiple locations, users, etc.
  id                int [pk, increment]
  name              varchar        // e.g. "Company A"
  created_at        timestamp [not null, default: `CURRENT_TIMESTAMP`]
  updated_at        timestamp [not null, default: `CURRENT_TIMESTAMP`]
}

// -------------------------------------------------------
// Locations (BELONG TO AN INSTANCE)
// -------------------------------------------------------
Table locations as L {
// Each location is nested under an instance.
// E.g. "Canteen #1" under "Company A"
  id                int [pk, increment]
  instance_id       int [not null, ref: > I.id] // references the parent instance
  name              varchar        // e.g. "Location A"
  address           varchar
  printer_template_id int          // references printer_templates.id for default layout
  created_at        timestamp [not null, default: `CURRENT_TIMESTAMP`]
  updated_at        timestamp [not null, default: `CURRENT_TIMESTAMP`]
}

// -------------------------------------------------------
// Users (INSTANCE-LEVEL OR LOCATION-LEVEL)
// -------------------------------------------------------
Table users as U {
// If location_id is NULL => user belongs to the entire instance (full access).
// If location_id is NOT NULL => user has access restricted to that location only.
  id                int [pk, increment]
  instance_id       int [not null, ref: > I.id] // user belongs to an instance
  location_id       int [ref: > L.id]           // optional reference, if user is location-scoped
  username          varchar [not null]
  password_hash     text    [not null]
  role              varchar [not null]  // e.g. 'admin', 'cashier', 'manager', etc.
  pin_hash          text                // optional, for self-service PIN
  created_at        timestamp [not null, default: `CURRENT_TIMESTAMP`]
  updated_at        timestamp [not null, default: `CURRENT_TIMESTAMP`]
}

// -------------------------------------------------------
// Products (DEFAULT AT INSTANCE-LEVEL, OPTIONAL LOCATION OVERRIDE)
// -------------------------------------------------------
Table products as P {
// Products can be global at the instance level by default (scope='instance' and location_id=NULL).
// If "location-specific products" is enabled (via settings), we can allow products tied to location.
  id                int [pk, increment]
  instance_id       int [not null, ref: > I.id] // which instance this product belongs to
  location_id       int [ref: > L.id]           // optional, set only if product is location-specific
  scope             varchar [not null, default: 'instance'] 
     // e.g. 'instance' or 'location' to determine product scope
  name              varchar    [not null]
  price             decimal(10,2) [not null]
  tax_rate          decimal(5,2)  [default: 0.00]
  status            varchar       [default: 'active'] // e.g. 'active', 'inactive'
  created_at        timestamp     [not null, default: `CURRENT_TIMESTAMP`]
  updated_at        timestamp     [not null, default: `CURRENT_TIMESTAMP`]
}

// -------------------------------------------------------
// Orders (MAIN ENTITY FOR TRANSACTIONS)
// -------------------------------------------------------
Table orders as O {
// Each order references the user (cashier or self-service) and the location where it's placed.
// The location belongs to an instance, so we can link back to the instance if needed.
  id                int [pk, increment]
  user_id           int [not null, ref: > U.id]
  location_id       int [not null, ref: > L.id]
  order_status      varchar [default: 'completed'] // e.g. 'completed', 'voided'
  total_amount      decimal(10,2) [not null]
  tax_amount        decimal(10,2) [default: 0.00]
  created_at        timestamp    [not null, default: `CURRENT_TIMESTAMP`]
  updated_at        timestamp    [not null, default: `CURRENT_TIMESTAMP`]
}

// -------------------------------------------------------
// Order Items (LINE ITEMS)
// -------------------------------------------------------
Table order_items as OI {
// Line items within an order; references both order and product.
  id                int [pk, increment]
  order_id          int [not null, ref: > O.id]
  product_id        int [not null, ref: > P.id]
  quantity          int [default: 1]
  price_at_sale     decimal(10,2) [not null]
  tax_at_sale       decimal(10,2) [default: 0.00]
  created_at        timestamp     [not null, default: `CURRENT_TIMESTAMP`]
  updated_at        timestamp     [not null, default: `CURRENT_TIMESTAMP`]
}

// -------------------------------------------------------
// Payments (OPTIONAL SEPARATE TABLE FOR MULTI-PAYMENT METHOD)
// -------------------------------------------------------
Table payments as PM {
// An order can have multiple payments (cash + card partial, etc.)
// In multi-tenant, each order is still bound by its location/instance.
  id                int [pk, increment]
  order_id          int [not null, ref: > O.id]
  payment_method    varchar [default: 'cash'] // e.g. 'cash', 'card', 'mobile'
  amount            decimal(10,2) [not null]
  created_at        timestamp    [not null, default: `CURRENT_TIMESTAMP`]
  updated_at        timestamp    [not null, default: `CURRENT_TIMESTAMP`]
}

// -------------------------------------------------------
// RFID Cards (LINKED TO USERS FOR SELF-SERVICE)
// -------------------------------------------------------
Table rfid_cards as RC {
// A user can have multiple RFID cards, or none.
// In multi-tenant scenario, the user => instance reference is enough to keep them separate.
  id                int [pk, increment]
  user_id           int [not null, ref: > U.id]
  card_number       varchar [unique, not null]
  status            varchar [default: 'active'] // e.g. 'active', 'lost'
  created_at        timestamp [not null, default: `CURRENT_TIMESTAMP`]
  updated_at        timestamp [not null, default: `CURRENT_TIMESTAMP`]
}

// -------------------------------------------------------
// Printer Templates
// -------------------------------------------------------
Table printer_templates as PT {
// Each template belongs to an instance. 
// If you want location-specific templates, you can either store them separately here
// or reference the location_id in the future. By default, location references template_id.
  id                int [pk, increment]
  instance_id       int [not null, ref: > I.id]
  template_name     varchar  [not null]
  template_content  text     [not null]          // Could be HTML/Text/JSON
  type              varchar  [default: 'receipt'] // e.g. 'receipt', 'kitchen'
  created_at        timestamp [not null, default: `CURRENT_TIMESTAMP`]
  updated_at        timestamp [not null, default: `CURRENT_TIMESTAMP`]
}

// -------------------------------------------------------
// Instance-Level Settings
// -------------------------------------------------------
Table instance_settings as IS {
// Key-value pairs to configure instance-wide preferences.
// For example, "enable_location_products" => "true/false"
  id                int [pk, increment]
  instance_id       int [not null, ref: > I.id]
  setting_key       varchar [not null]
  setting_value     text    [not null]
  created_at        timestamp [not null, default: `CURRENT_TIMESTAMP`]
  updated_at        timestamp [not null, default: `CURRENT_TIMESTAMP`]
}

// -------------------------------------------------------
// Location-Level Settings
// -------------------------------------------------------
Table location_settings as LS {
// Key-value pairs for location-specific configuration overrides or preferences.
// E.g., "custom_receipt_logo" => "..."
  id                int [pk, increment]
  location_id       int [not null, ref: > L.id]
  setting_key       varchar [not null]
  setting_value     text    [not null]
  created_at        timestamp [not null, default: `CURRENT_TIMESTAMP`]
  updated_at        timestamp [not null, default: `CURRENT_TIMESTAMP`]
}

// -------------------------------------------------------
// Existing Relationship: locations -> printer_templates
// (If location has a default template, it references the template row)
Ref: L.printer_template_id > PT.id
